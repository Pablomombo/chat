{"ast":null,"code":"var _jsxFileName = \"/Users/One/Desktop/Becode/chat/src/components/Chat.js\";\nimport React, { Component } from 'react';\nimport ChatInput from './ChatInput';\nimport Users from \"./Users\";\nimport ChatMessages from './ChatMessages';\nimport socketIOClient from 'socket.io-client';\n\nclass Chat extends Component {\n  constructor(props) {\n    super(props);\n    this.socket = null;\n    this.state = {\n      username: localStorage.getItem('username') ? localStorage.getItem('username') : '',\n      uid: localStorage.getItem('uid') ? localStorage.getItem('uid') : this.generateUID(),\n      chat_ready: false,\n      users: [],\n      messages: [],\n      message: ''\n    };\n  } // componentDidMount(){\n  //     if(this.state.username.length) {\n  //         this.initChat();\n  //     }\n  // }\n\n\n  generateUID() {\n    let text = '';\n    const possible = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n\n    for (let i = 0; i < 12; i++) {\n      text += possible.charAt(Math.floor(Math.random() * possible.length));\n    }\n\n    localStorage.setItem('uid', text);\n    return text;\n  }\n\n  setUsername(username, e) {\n    this.setState({\n      username: username // }, () => {\n      //     this.initChat();\n\n    });\n  }\n\n  sendMessage(message, e) {\n    console.log(message);\n    this.setState({\n      messages: this.state.messages.concat([{\n        username: localStorage.getItem('username'),\n        uid: localStorage.getItem('uid'),\n        message: message\n      }])\n    });\n    this.socket.emit('message', {\n      username: localStorage.getItem('username'),\n      uid: localStorage.getItem('uid'),\n      message: message\n    });\n    this.scrollToBottom();\n  }\n\n  scrollToBottom() {\n    let messages = document.getElementsByClassName('messages')[0];\n    messages.scrollTop = messages.scrollHeight - messages.clientHeight;\n  } // initChat(){\n  //     localStorage.setItem('username', this.state.username);\n  //     this.setState({\n  //         chat_ready : true,\n  //     });\n  //     this.socket = socketIOClient('ws://localhost:3000', {\n  //         query : 'username='+this.state.username+'&uid='+this.state.uid\n  //     });\n  //     this.socket.on('updateUsersList', function (users) {\n  //         console.log(users);\n  //         this.setState({\n  //             users : users\n  //         });\n  //     }.bind(this));\n  //     this.socket.on('message', function (message) {\n  //         this.setState({\n  //             messages : this.state.messages.concat([message])\n  //         });\n  //         this.scrollToBottom();\n  //     }.bind(this));\n  // }\n\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"App\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94\n      },\n      __self: this\n    }, React.createElement(\"header\", {\n      className: \"App-header\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95\n      },\n      __self: this\n    }, this.state.chat_ready ? React.createElement(React.Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97\n      },\n      __self: this\n    }, React.createElement(Users, {\n      users: this.state.users,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98\n      },\n      __self: this\n    }), React.createElement(ChatMessages, {\n      sendMessage: this.sendMessage.bind(this),\n      messages: this.state.messages,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99\n      },\n      __self: this\n    })) : React.createElement(ChatInput, {\n      setUsername: this.setUsername.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105\n      },\n      __self: this\n    })));\n  }\n\n}\n\nexport default Chat;","map":{"version":3,"sources":["/Users/One/Desktop/Becode/chat/src/components/Chat.js"],"names":["React","Component","ChatInput","Users","ChatMessages","socketIOClient","Chat","constructor","props","socket","state","username","localStorage","getItem","uid","generateUID","chat_ready","users","messages","message","text","possible","i","charAt","Math","floor","random","length","setItem","setUsername","e","setState","sendMessage","console","log","concat","emit","scrollToBottom","document","getElementsByClassName","scrollTop","scrollHeight","clientHeight","render","bind"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,SAAP,MAAsB,aAAtB;AACA,OAAOC,KAAP,MAAkB,SAAlB;AACA,OAAOC,YAAP,MAAyB,gBAAzB;AACA,OAAOC,cAAP,MAA2B,kBAA3B;;AAEA,MAAMC,IAAN,SAAmBL,SAAnB,CAA6B;AAEzBM,EAAAA,WAAW,CAACC,KAAD,EAAO;AACd,UAAMA,KAAN;AACA,SAAKC,MAAL,GAAc,IAAd;AACA,SAAKC,KAAL,GAAa;AACTC,MAAAA,QAAQ,EAAGC,YAAY,CAACC,OAAb,CAAqB,UAArB,IAAmCD,YAAY,CAACC,OAAb,CAAqB,UAArB,CAAnC,GAAsE,EADxE;AAETC,MAAAA,GAAG,EAAGF,YAAY,CAACC,OAAb,CAAqB,KAArB,IAA8BD,YAAY,CAACC,OAAb,CAAqB,KAArB,CAA9B,GAA4D,KAAKE,WAAL,EAFzD;AAGTC,MAAAA,UAAU,EAAG,KAHJ;AAITC,MAAAA,KAAK,EAAG,EAJC;AAKTC,MAAAA,QAAQ,EAAG,EALF;AAMTC,MAAAA,OAAO,EAAG;AAND,KAAb;AAQH,GAbwB,CAezB;AACA;AACA;AACA;AACA;;;AAEAJ,EAAAA,WAAW,GAAE;AACT,QAAIK,IAAI,GAAG,EAAX;AACA,UAAMC,QAAQ,GAAG,gEAAjB;;AACA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,EAApB,EAAwBA,CAAC,EAAzB,EAA4B;AACxBF,MAAAA,IAAI,IAAIC,QAAQ,CAACE,MAAT,CAAgBC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgBL,QAAQ,CAACM,MAApC,CAAhB,CAAR;AACH;;AACDf,IAAAA,YAAY,CAACgB,OAAb,CAAqB,KAArB,EAA4BR,IAA5B;AACA,WAAOA,IAAP;AACH;;AAEDS,EAAAA,WAAW,CAAClB,QAAD,EAAWmB,CAAX,EAAa;AACpB,SAAKC,QAAL,CAAc;AACVpB,MAAAA,QAAQ,EAAGA,QADD,CAEd;AACA;;AAHc,KAAd;AAKH;;AAEDqB,EAAAA,WAAW,CAACb,OAAD,EAAUW,CAAV,EAAY;AACnBG,IAAAA,OAAO,CAACC,GAAR,CAAYf,OAAZ;AACA,SAAKY,QAAL,CAAc;AACVb,MAAAA,QAAQ,EAAG,KAAKR,KAAL,CAAWQ,QAAX,CAAoBiB,MAApB,CAA2B,CAAC;AACpCxB,QAAAA,QAAQ,EAAGC,YAAY,CAACC,OAAb,CAAqB,UAArB,CADyB;AAEpCC,QAAAA,GAAG,EAAGF,YAAY,CAACC,OAAb,CAAqB,KAArB,CAF8B;AAGpCM,QAAAA,OAAO,EAAGA;AAH0B,OAAD,CAA3B;AADD,KAAd;AAOA,SAAKV,MAAL,CAAY2B,IAAZ,CAAiB,SAAjB,EAA4B;AACxBzB,MAAAA,QAAQ,EAAGC,YAAY,CAACC,OAAb,CAAqB,UAArB,CADa;AAExBC,MAAAA,GAAG,EAAGF,YAAY,CAACC,OAAb,CAAqB,KAArB,CAFkB;AAGxBM,MAAAA,OAAO,EAAGA;AAHc,KAA5B;AAKA,SAAKkB,cAAL;AACH;;AAEDA,EAAAA,cAAc,GAAE;AACZ,QAAInB,QAAQ,GAAGoB,QAAQ,CAACC,sBAAT,CAAgC,UAAhC,EAA4C,CAA5C,CAAf;AACArB,IAAAA,QAAQ,CAACsB,SAAT,GAAqBtB,QAAQ,CAACuB,YAAT,GAAwBvB,QAAQ,CAACwB,YAAtD;AACH,GA3DwB,CA6DzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEAC,EAAAA,MAAM,GAAE;AACJ,WACI;AAAK,MAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAQ,MAAA,SAAS,EAAC,YAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACK,KAAKjC,KAAL,CAAWM,UAAX,GACG,oBAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,oBAAC,KAAD;AAAO,MAAA,KAAK,EAAE,KAAKN,KAAL,CAAWO,KAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,EAEI,oBAAC,YAAD;AACI,MAAA,WAAW,EAAE,KAAKe,WAAL,CAAiBY,IAAjB,CAAsB,IAAtB,CADjB;AAEI,MAAA,QAAQ,EAAE,KAAKlC,KAAL,CAAWQ,QAFzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFJ,CADH,GASG,oBAAC,SAAD;AACI,MAAA,WAAW,EAAE,KAAKW,WAAL,CAAiBe,IAAjB,CAAsB,IAAtB,CADjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAVR,CADJ,CADJ;AAmBH;;AAzGwB;;AA4G7B,eAAetC,IAAf","sourcesContent":["import React, { Component } from 'react';\nimport ChatInput from './ChatInput';\nimport Users from \"./Users\";\nimport ChatMessages from './ChatMessages';\nimport socketIOClient from 'socket.io-client';\n\nclass Chat extends Component {\n\n    constructor(props){\n        super(props);\n        this.socket = null;\n        this.state = {\n            username : localStorage.getItem('username') ? localStorage.getItem('username') : '',\n            uid : localStorage.getItem('uid') ? localStorage.getItem('uid') : this.generateUID(),\n            chat_ready : false,\n            users : [],\n            messages : [],\n            message : ''\n        }\n    }\n\n    // componentDidMount(){\n    //     if(this.state.username.length) {\n    //         this.initChat();\n    //     }\n    // }\n\n    generateUID(){\n        let text = '';\n        const possible = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n        for (let i = 0; i < 12; i++){\n            text += possible.charAt(Math.floor(Math.random() * possible.length));\n        }\n        localStorage.setItem('uid', text);\n        return text;\n    }\n\n    setUsername(username, e){\n        this.setState({\n            username : username\n        // }, () => {\n        //     this.initChat();\n        });\n    }\n\n    sendMessage(message, e){\n        console.log(message);\n        this.setState({\n            messages : this.state.messages.concat([{\n               username : localStorage.getItem('username'),\n               uid : localStorage.getItem('uid'),\n               message : message,\n           }])\n        });\n        this.socket.emit('message', {\n            username : localStorage.getItem('username'),\n            uid : localStorage.getItem('uid'),\n            message : message,\n        });\n        this.scrollToBottom();\n    }\n\n    scrollToBottom(){\n        let messages = document.getElementsByClassName('messages')[0];\n        messages.scrollTop = messages.scrollHeight - messages.clientHeight;\n    }\n\n    // initChat(){\n    //     localStorage.setItem('username', this.state.username);\n    //     this.setState({\n    //         chat_ready : true,\n    //     });\n    //     this.socket = socketIOClient('ws://localhost:3000', {\n    //         query : 'username='+this.state.username+'&uid='+this.state.uid\n    //     });\n\n    //     this.socket.on('updateUsersList', function (users) {\n    //         console.log(users);\n    //         this.setState({\n    //             users : users\n    //         });\n    //     }.bind(this));\n\n    //     this.socket.on('message', function (message) {\n    //         this.setState({\n    //             messages : this.state.messages.concat([message])\n    //         });\n    //         this.scrollToBottom();\n    //     }.bind(this));\n    // }\n\n    render(){\n        return (\n            <div className=\"App\">\n                <header className=\"App-header\">\n                    {this.state.chat_ready ? (\n                        <React.Fragment>\n                            <Users users={this.state.users}/>\n                            <ChatMessages\n                                sendMessage={this.sendMessage.bind(this)}\n                                messages={this.state.messages}\n                            />\n                        </React.Fragment>\n                    ) : (\n                        <ChatInput\n                            setUsername={this.setUsername.bind(this)}\n                        />\n                    )}\n                </header>\n            </div>\n        );\n    }\n}\n\nexport default Chat;"]},"metadata":{},"sourceType":"module"}